<?php

/**
 * @file
 * Contains fr_node_type_categories.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\Entity\NodeType;

/**
 * Implements hook_help().
 */
function fr_node_type_categories_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.for_node_type_categories':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Enhances the node/add experience with fields to categorize node types, and displays the node type by list by category.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function fr_node_type_categories_theme_suggestions_node_add_list_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'first_run__node_type_cat_list';
}

/**
 * Implements hook_theme().
 */
function fr_node_type_categories_theme($existing, $type, $theme, $path) {
  return [
    'first_run__node_type_cat_list' => [
      'template' => 'first-run--node-type-cat-list',
      'base hook' => 'node_add_list',
    ],

    'block__add_content_search' => [
      'template' => 'block--add-content-search',
      'base hook' => 'block',
    ],

  ];

}

/**
 * Implements hook_page_attachments().
 */
function fr_node_type_categories_page_attachments(array &$page) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  if ($route_name == 'node.add_page') {
    $page['#attached']['library'][] = 'fr_node_type_categories/fr_node_type_categories.node-type-categories-list';
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function fr_node_type_categories_form_node_type_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\node\NodeTypeForm $node_type_form */
  $node_type_form = $form_state->getFormObject();
  /** @var \Drupal\node\Entity\NodeType $node_type */
  $node_type = $node_type_form->getEntity();

  $cat_config = $node_type->getThirdPartySetting('fr_node_type_categories', 'node_type_category', 'Uncategorized');
  $form['node_type_category'] = [
    '#type' => 'select',
    '#required' => FALSE,
    '#options' => _build_cats_array(),
    '#title' => t('Category'),
    '#weight' => 0,
    '#default_value' => $cat_config,
  ];

  $form['#entity_builders'][] = '_fr_node_type_categories_node_type_form_builder';
}

/**
 * Entity form builder for category select list.
 */
function _fr_node_type_categories_node_type_form_builder($entity_type, NodeType $node_type, &$form, FormStateInterface $form_state) {
  $node_type->setThirdPartySetting('fr_node_type_categories', 'node_type_category', $form_state->getValue('node_type_category'));
}

/**
 * Helper function to find non-empty content type categories.
 *
 * @return array
 *   Content type categories with sub-items.
 */
function _get_used_categories() {
  $node_types = \Drupal::service('entity_type.manager')->getStorage('node_type')->loadMultiple();
  $categories_in_use = [];
  $user = \Drupal::currentUser();
  $cat_array = _build_cats_array();
  foreach ($node_types as $type) {
    $type_name = $type->id();
    if ($user->hasPermission('create ' . $type_name . ' content')) {
      $cat_id = $type->getThirdPartySetting('fr_node_type_categories', 'node_type_category');
      if (isset($cat_id)) {
        $categories_in_use[$cat_id] = $cat_array[$cat_id];
      }
      if (is_null($cat_id)) {
        $categories_in_use['uncategorized'] = 'Uncategorized';
      }
    }
  }
  $categories_in_use = array_intersect($cat_array, $categories_in_use);
  return $categories_in_use;
}

/**
 * Create the type categories array from the form input.
 */
function _build_cats_array() {
  $config = \Drupal::config('fr_node_type_categories.settings');
  $cats_config = $config->get('category_list');
  $config_array = explode(',', $cats_config);

  $catsArray = [];
  foreach ($config_array as $o) {
    $exploded = explode('|', $o);
    $catsArray[trim($exploded[0])] = trim($exploded[1]);
  }
  $catsArray['uncategorized'] = 'Uncategorized';

  return $catsArray;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function fr_node_type_categories_preprocess_node_add_list(&$variables) {
  $variables['categories'] = _get_used_categories();
}
